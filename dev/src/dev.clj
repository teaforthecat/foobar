(ns dev
(:refer-clojure :exclude [test])
(:require [clojure.repl :refer :all]
          [fipp.edn :refer [pprint]]
          [clojure.tools.namespace.repl :refer [refresh]]
          [clojure.java.io :as io]
          [duct.core :as duct]
          [duct.core.repl :as duct-repl]
          [eftest.runner :as eftest]
          [integrant.core :as ig]
          [integrant.repl :refer [clear halt go init prep reset]]
          [integrant.repl.state :refer [config system]]
          [provisdom.spectomic.core :as spectomic]))

(duct/load-hierarchy)

(defn read-config []
  (duct/read-config (io/resource "foobar/config.edn")))

(defn test []
(eftest/run-tests (eftest/find-tests "test")))

(def profiles
[:duct.profile/dev :duct.profile/local])

(clojure.tools.namespace.repl/set-refresh-dirs "dev/src" "src" "test")

(when (io/resource "local.clj")
(load "local"))

(integrant.repl/set-prep! #(duct/prep-config (read-config) profiles))


(defn -write-spec-schema [options]
  (let [out-file (get options :out-file)
        specs (or (:spec-schema options)
                  @(resolve (:spec-var options)))
        schema (spectomic/datomic-schema specs)]

    (spit out-file ";;this file is generated by dev/write-spec-schema\n")
    (spit out-file schema :append true)
    (spit out-file "\n" :append true)
    (println "wrote " out-file)
    schema))

(defn write-spec-schema []
  (-write-spec-schema
   {:out-file "resources/foobar/db/spec-schema.edn"
    :spec-schema [:foobar.handler.cqrs/zulu]}))

(comment
  (require 'foobar.handler.cqrs)

  (write-spec-schema)

  )
